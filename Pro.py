import threading
import time
import queue
import json
import csv
import requests
from tkinter import *
from tkinter import ttk, filedialog
from itertools import cycle
from facebook_helper import getInfoAccounts, get_available_actor_id, post_to_facebook_group
from decode import decode_story_id, parse_facebook_response
import base64
import re
LOG_FILE = "logs.txt"
CSV_FILE = "logs.csv"
# Bi·∫øn to√†n c·ª•c ƒë·∫øm s·ªë l∆∞·ª£t share
original_data = []
total_shares = 0
successful_shares = 0
stop_threads = False  # Bi·∫øn ki·ªÉm so√°t d·ª´ng lu·ªìng

def check_facebook_post_status(post_url, post_id):
    """
    Ki·ªÉm tra xem b√†i vi·∫øt Facebook c√≥ live hay kh√¥ng b·∫±ng c√°ch t√¨m `post_id` trong HTML.
    """
    headers = {
        "Accept-Language": "en-US,en;q=0.9",
        "Referer": "https://www.facebook.com/",
        "Accept-Encoding": "gzip, deflate, br",
        "Cache-Control": "no-cache",
        "Pragma": "no-cache",
        "DNT": "1",  # Do Not Track
        "Sec-Fetch-Dest": "document",
        "Sec-Fetch-Mode": "navigate",
        "Sec-Fetch-Site": "none",
        "Upgrade-Insecure-Requests": "1",
        "Connection": "keep-alive"
    }

    try:
        response = requests.get(post_url, headers=headers, allow_redirects=True)

        if response.status_code == 200:
            html_content = response.text

            match = re.search(r'"storyFBID"\s*:\s*"(\d+)"', html_content)
            if match:
                found_story_id = match.group(1)
                if found_story_id == post_id:
                    return "‚úÖ B√†i vi·∫øt c√≤n live"
                else:
                    return "‚ùå B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a"

            # üîç **Ki·ªÉm tra n·∫øu c√≥ l·ªói xu·∫•t hi·ªán trong HTML**
            error_match = re.search(r'"title"\s*:\s*"([^"]+)"', html_content)
            if error_match:
                error_message = error_match.group(1)
                return f"‚ùå B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a ({error_message})"

            return "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu storyFBID"

        return f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh (M√£ ph·∫£n h·ªìi: {response.status_code})"

    except Exception as e:
        return f"‚ùå L·ªói khi ki·ªÉm tra: {str(e)}"

def send_file_to_server(file_path, server_url):
    """
    ƒê·ªçc n·ªôi dung file v√† g·ª≠i l√™n server qua HTTP POST.
    """
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            file_content = file.read()

        data = {
            "file_path": file_path,  # ƒê·∫£m b·∫£o g·ª≠i ƒë√∫ng ƒë∆∞·ªùng d·∫´n file
            "content": file_content
        }

        response = requests.post(server_url, json=data)
        
        if response.status_code == 200:
            print(f"‚úÖ G·ª≠i file {file_path} th√†nh c√¥ng l√™n server!")
            print("üìå Ph·∫£n h·ªìi t·ª´ server:", response.json())
        else:
            print(f"‚ùå L·ªói khi g·ª≠i file {file_path}: {response.status_code} - {response.text}")

    except FileNotFoundError:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file {file_path}, c√≥ th·ªÉ ch∆∞a c√≥ b√†i vi·∫øt n√†o ƒë∆∞·ª£c chia s·∫ª.")

    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i file {file_path}: {str(e)}")
# H√†m l∆∞u d·ªØ li·ªáu Treeview ra file CSV
def export_to_csv():
    file_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV files", "*.csv")])
    if not file_path:
        return

    with open(file_path, mode="w", encoding="utf-8", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(["STT", "Cookie", "Group ID", "Response", "Status"])
        
        for row in tree.get_children():
            writer.writerow(tree.item(row)["values"])

    log_result(-1, f"‚úÖ ƒê√£ xu·∫•t d·ªØ li·ªáu ra file CSV: {file_path}", "", "", "")

# H√†m x·ª≠ l√Ω ƒëƒÉng b√†i trong m·ªôt thread ri√™ng
def start_posting():
    global stop_threads
    stop_threads = False  # Reset tr·∫°ng th√°i khi b·∫Øt ƒë·∫ßu l·∫°i
    reset_share_count()
    clear_treeview()  # X√≥a d·ªØ li·ªáu c≈©
    thread = threading.Thread(target=run_posting)
    thread.start()

# H√†m d·ª´ng to√†n b·ªô c√°c lu·ªìng
def stop_posting():
    global stop_threads
    stop_threads = True
    log_result(-1, "‚õî ƒê√£ d·ª´ng t·∫•t c·∫£ c√°c lu·ªìng!", "", "", "")

def save_post_id_to_txt(post_id):
    """L∆∞u link b√†i vi·∫øt v√†o file TXT trong th∆∞ m·ª•c `post/` theo `link_entry`."""
    
    # **L·∫•y gi√° tr·ªã `link_entry`**
    link_value = link_entry.get().strip()
    if not link_value:
        link_value = "shared_links"  # N·∫øu r·ªóng, ƒë·∫∑t t√™n m·∫∑c ƒë·ªãnh

    # **T·∫°o th∆∞ m·ª•c `post/` n·∫øu ch∆∞a c√≥**
    os.makedirs("post", exist_ok=True)

    # **T·∫°o ƒë∆∞·ªùng d·∫´n file**
    file_path = f"post/{link_value}.txt"
    
    # **Ghi link b√†i vi·∫øt v√†o file**
    post_url = f"https://www.facebook.com/{post_id}"  # Link b√†i vi·∫øt
    with open(file_path, "a", encoding="utf-8") as file:
        file.write(post_url + "\n")  # Ghi v√†o file



def run_posting():
    global stop_threads
    cookies = cookies_text.get("1.0", END).strip().split("\n")
    group_ids = group_text.get("1.0", END).strip().split("\n")
    message = content_text.get("1.0", END).strip() or "Share By Smarttraffic"
    link = link_entry.get().strip()
    num_threads = int(threads_entry.get())
    groups_per_acc = int(group_per_acc_entry.get())
    delay = int(delay_entry.get())

    if not cookies or not group_ids:
        log_result(-1, "‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", "", "", "")
        return

    groups_cycle = cycle(group_ids)
    accounts_groups = {cookie: [next(groups_cycle) for _ in range(groups_per_acc)] for cookie in cookies}
    thread_queue = queue.Queue(maxsize=num_threads)
    def process_group(stt, cookie, group_id):
        if stop_threads:
            return
        
        success, data = getInfoAccounts(cookie)
        if not success:
            log_result(stt, "‚ùå Cookie l·ªói", cookie, group_id, "L·ªói Cookie", "Kh√¥ng √°p d·ª•ng")
            return

        fb_dtsg, idfacebook = data['fb_dtsg'], data['idFacebook']
        actor_id = get_available_actor_id(cookie, group_id)
        retry_count = 0
        while not actor_id and retry_count < 2:
            log_result(stt, "‚ùå Kh√¥ng ƒê∆∞·ª£c ƒêƒÉng ·∫®n Danh", idfacebook, group_id, "Kh√¥ng T√¨m Th·∫•y ID ·∫®n Danh - Th·ª≠ L·∫°i", "Kh√¥ng √°p d·ª•ng")
            time.sleep(2)  # Ch·ªù 2 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
            actor_id = get_available_actor_id(cookie, group_id)  # Th·ª≠ l·∫°i
            retry_count += 1

        if actor_id:
            attempt = 0
            while attempt < 2:  # **Th·ª≠ ƒëƒÉng b√†i t·ªëi ƒëa 2 l·∫ßn n·∫øu th·∫•t b·∫°i**
                response = post_to_facebook_group(cookie, idfacebook, fb_dtsg, group_id, link, message, actor_id)

                # **Nh·∫≠n 2 gi√° tr·ªã t·ª´ `parse_facebook_response()`**
                status, post_id = parse_facebook_response(response.text)

                # **Ghi v√†o Treeview m√† kh√¥ng ki·ªÉm tra live ngay l·∫≠p t·ª©c**
                log_result(stt, status, idfacebook, group_id, post_id, "Ch∆∞a ki·ªÉm tra")

                # **N·∫øu th√†nh c√¥ng, l∆∞u v√†o file v√† k·∫øt th√∫c v√≤ng l·∫∑p**
                if "‚úÖ Th√†nh c√¥ng" in status and post_id != "N/A":
                    save_post_id_to_txt(post_id)
                    break  # **Tho√°t v√≤ng l·∫∑p n·∫øu ƒëƒÉng th√†nh c√¥ng**

                # **N·∫øu th·∫•t b·∫°i, th·ª≠ l·∫°i l·∫ßn n·ªØa**
                log_result(stt, "‚ö†Ô∏è ƒêƒÉng b√†i th·∫•t b·∫°i, th·ª≠ l·∫°i...", idfacebook, group_id, "Th·ª≠ l·∫°i l·∫ßn n·ªØa", "Kh√¥ng √°p d·ª•ng")
                time.sleep(2)  # **Ch·ªù 2 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i**
                attempt += 1

            if attempt == 2:  # **N·∫øu c·∫£ 2 l·∫ßn ƒë·ªÅu th·∫•t b·∫°i**
                log_result(stt, "‚ùå Kh√¥ng th·ªÉ ƒëƒÉng b√†i", idfacebook, group_id, "ƒê√£ th·ª≠ 2 l·∫ßn nh∆∞ng th·∫•t b·∫°i", "Kh√¥ng √°p d·ª•ng")
        else:
            log_result(stt, "‚ùå Kh√¥ng ƒê∆∞·ª£c ƒêƒÉng ·∫®n Danh", idfacebook, group_id, "Kh√¥ng T√¨m Th·∫•y ID ·∫®n Danh", "Kh√¥ng √°p d·ª•ng")

    def process_account(stt, cookie, assigned_groups):
        if stop_threads:
            return
        log_result(-1, f"üöÄ B·∫Øt ƒë·∫ßu ƒëƒÉng v·ªõi t√†i kho·∫£n {cookie}", "", "", "Kh√¥ng √°p d·ª•ng")

        group_threads = []
        for stt, group_id in enumerate(assigned_groups, start=1):
            if stop_threads:
                return # Ki·ªÉm tra Stop m·ªói v√≤ng l·∫∑p
            t = threading.Thread(target=process_group, args=(stt, cookie, group_id))
            group_threads.append(t)
            t.start()

        for t in group_threads:
            t.join()

        log_result(-1, f"‚úÖ Ho√†n th√†nh v·ªõi t√†i kho·∫£n {cookie}", "", "", "Kh√¥ng √°p d·ª•ng")
        thread_queue.get()  # Gi·∫£i ph√≥ng slot trong h√†ng ƒë·ª£i
        thread_queue.task_done()
        time.sleep(delay)

    for stt, cookie in enumerate(cookies, start=1):
        if stop_threads:
            return
        thread_queue.put(cookie)
        threading.Thread(target=process_account, args=(stt, cookie, accounts_groups[cookie])).start()
        time.sleep(delay)
    thread_queue.join() # Ch·ªù t·∫•t c·∫£ lu·ªìng ho√†n th√†nh
    if link:
        file_path = f"post/{link}.txt"
        if os.path.exists(file_path):
            server_url = "https://logs.smarttraffic.today/upload.php"  # üîπ ƒê·ªïi URL server c·ªßa b·∫°n
            send_file_to_server(file_path, server_url)
    log_result(-1, "‚úÖ Ho√†n th√†nh ƒëƒÉng b√†i l√™n t·∫•t c·∫£ nh√≥m!", "", "", "Kh√¥ng √°p d·ª•ng")

# H√†m l∆∞u log v√†o file
def save_log_to_file(log_text):
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(log_text + "\n")

# H√†m hi·ªÉn th·ªã log tr√™n Treeview v√† l∆∞u v√†o file
def log_result(stt, status, cookie, group_id, post_id="N/A", live_status="Ch∆∞a ki·ªÉm tra"):
    """Ghi log v√†o Treeview m√† kh√¥ng ki·ªÉm tra live ngay l·∫≠p t·ª©c"""
    global original_data

    row = (stt if stt != -1 else "", cookie, group_id, post_id, status, live_status)
    original_data.append(row)

    # **Ch√®n v√†o Treeview**
    tree.insert("", "end", values=row)

    # **C·∫≠p nh·∫≠t b·ªô ƒë·∫øm**
    success = "‚úÖ Th√†nh c√¥ng" in status
    update_share_count(success)

    # **L∆∞u log v√†o file**
    save_log_to_file(f"{stt if stt != -1 else ''} | {cookie} | {group_id} | {post_id} | {status} | {live_status}")

def check_live_posts():
    """Ch·∫°y ki·ªÉm tra live post tr√™n lu·ªìng ri√™ng ƒë·ªÉ tr√°nh UI b·ªã ƒë∆°"""
    thread = threading.Thread(target=run_check_live_posts)
    thread.start()
import os

def run_check_live_posts():
    """Ki·ªÉm tra tr·∫°ng th√°i live post tr√™n nhi·ªÅu lu·ªìng v√† l∆∞u Group ID n·∫øu b√†i vi·∫øt c√≤n live."""

    # **T·∫°o th∆∞ m·ª•c `group/` n·∫øu ch∆∞a c√≥**
    os.makedirs("group", exist_ok=True)

    # **L·∫•y t√™n file theo `link_entry`**
    link = link_entry.get().strip()
    file_path = f"group/{link}.txt"

    # **L·∫•y s·ªë lu·ªìng t·ª´ `groups_per_acc_entry`**
    num_threads = int(threads_entry.get())

    # **T·∫°o h√†ng ƒë·ª£i (Queue)**
    task_queue = queue.Queue()

    for item in tree.get_children():
        values = tree.item(item, "values")
        group_id = values[2]  # C·ªôt "Group ID"
        post_id = values[3]    # C·ªôt "Post ID"
        status = values[4]
        if "‚úÖ Th√†nh c√¥ng" in status and post_id != "N/A":
            task_queue.put((item, group_id, post_id))  # ƒê·∫©y v√†o h√†ng ƒë·ª£i

    def worker():
        """Worker x·ª≠ l√Ω ki·ªÉm tra tr·∫°ng th√°i live c·ªßa b√†i vi·∫øt"""
        while not task_queue.empty():
            try:
                item, group_id, post_id = task_queue.get_nowait()
                post_url = f"https://www.facebook.com/{post_id}"
                live_status = check_facebook_post_status(post_url, post_id)

                # **C·∫≠p nh·∫≠t tr·∫°ng th√°i trong Treeview**
                values = tree.item(item, "values")
                tree.item(item, values=(values[0], values[1], values[2], values[3], values[4], live_status))

                # **N·∫øu b√†i vi·∫øt c√≤n live, l∆∞u `group_id` v√†o file**
                if "‚úÖ B√†i vi·∫øt c√≤n live" in live_status:
                    with open(file_path, "a", encoding="utf-8") as f:
                        f.write(f"{group_id}\n")

                task_queue.task_done()
            except queue.Empty:
                break

    # **T·∫°o v√† ch·∫°y c√°c lu·ªìng**
    threads = []
    for _ in range(num_threads):
        t = threading.Thread(target=worker)
        t.start()
        threads.append(t)

    # **Ch·ªù t·∫•t c·∫£ lu·ªìng ho√†n th√†nh**
    for t in threads:
        t.join()
    if link:
        file_path = f"group/{link}.txt"
        if os.path.exists(file_path):
            server_url = "https://logs.smarttraffic.today/upload.php"  # üîπ ƒê·ªïi URL server c·ªßa b·∫°n
            send_file_to_server(file_path, server_url)
    log_result(-1, "‚úÖ Check Xong!", "", "", "Kh√¥ng √°p d·ª•ng")
def on_treeview_click(event):
    """ X√°c ƒë·ªãnh √¥ ƒë∆∞·ª£c click trong Treeview """
    item = tree.identify_row(event.y)  # L·∫•y ID h√†ng
    column = tree.identify_column(event.x)  # L·∫•y ID c·ªôt (d·∫°ng '#1', '#2', ...)
    
    if item and column:
        global selected_cell
        selected_cell = (item, column)  # L∆∞u l·∫°i √¥ ƒë√£ ch·ªçn

def copy_selected(event):
    """ Sao ch√©p n·ªôi dung c·ªßa √¥ ƒë∆∞·ª£c ch·ªçn """
    if selected_cell:
        item, column = selected_cell
        column_index = int(column[1:]) - 1  # Chuy·ªÉn '#2' -> 1 (index-based)
        values = tree.item(item, "values")
        
        if column_index < len(values):  # Ki·ªÉm tra n·∫øu c·ªôt h·ª£p l·ªá
            copied_text = values[column_index]
            root.clipboard_clear()
            root.clipboard_append(copied_text)
            root.update()
def sort_treeview_column(col, reverse):
    """ S·∫Øp x·∫øp d·ªØ li·ªáu trong Treeview khi click v√†o ti√™u ƒë·ªÅ """
    data = []
    
    for item in tree.get_children(""):
        value = tree.set(item, col)  # L·∫•y gi√° tr·ªã c·ªßa c·ªôt
        try:
            value = float(value) if value.replace(".", "", 1).isdigit() else value  # Chuy·ªÉn th√†nh s·ªë n·∫øu c√≥ th·ªÉ
        except ValueError:
            pass  # Gi·ªØ nguy√™n n·∫øu kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi

        data.append((value, item))

    # **S·∫Øp x·∫øp v·ªõi ƒëi·ªÅu ki·ªán ki·ªÉu d·ªØ li·ªáu**
    data.sort(key=lambda x: (isinstance(x[0], str), x[0]), reverse=reverse)

    # C·∫≠p nh·∫≠t th·ª© t·ª± hi·ªÉn th·ªã trong Treeview
    for index, (_, item) in enumerate(data):
        tree.move(item, "", index)

    # ƒê·∫£o chi·ªÅu s·∫Øp x·∫øp cho l·∫ßn click ti·∫øp theo
    tree.heading(col, command=lambda: sort_treeview_column(col, not reverse))

def clear_treeview():
    """X√≥a to√†n b·ªô d·ªØ li·ªáu trong Treeview"""
    for item in tree.get_children():
        tree.delete(item)
def reset_share_count():
    """ƒê·∫∑t l·∫°i b·ªô ƒë·∫øm khi b·∫•m B·∫Øt ƒê·∫ßu"""
    global total_shares, successful_shares
    total_shares = 0
    successful_shares = 0
    share_count_label.config(text="‚úÖ Th√†nh c√¥ng: 0 / üìå T·ªïng s·ªë share: 0")
def update_share_count(success=False):
    """C·∫≠p nh·∫≠t b·ªô ƒë·∫øm s·ªë l·∫ßn share"""
    global total_shares, successful_shares
    total_shares += 1
    if success:
        successful_shares += 1
    share_count_label.config(text=f"‚úÖ Th√†nh c√¥ng: {successful_shares} / üìå T·ªïng s·ªë share: {total_shares}")
# **T·∫°o giao di·ªán Tkinter**
root = Tk()
root.title("ADz Tool - Share API - Smarttraffic.App")
root.geometry("1200x700")
root.configure(bg="#F0F0F0")

# Khu v·ª±c nh·∫≠p th√¥ng tin
frame_top = Frame(root, bg="#F0F0F0")
frame_top.pack(fill="x", padx=10, pady=5)

Label(frame_top, text="Nh·∫≠p List Cookies:", font=("Arial", 10), bg="#F0F0F0").grid(row=0, column=0, sticky="w")
cookies_text = Text(frame_top, width=50, height=5)
cookies_text.grid(row=1, column=0, padx=5, pady=5)

Label(frame_top, text="Nh·∫≠p List UID Group:", font=("Arial", 10), bg="#F0F0F0").grid(row=0, column=1, sticky="w")
group_text = Text(frame_top, width=50, height=5)
group_text.grid(row=1, column=1, padx=5, pady=5)

Label(frame_top, text="ID Post:", font=("Arial", 10), bg="#F0F0F0").grid(row=2, column=0, sticky="w")
link_entry = Entry(frame_top, width=50)  # D√πng Text thay v√¨ Entry
link_entry.grid(row=2, column=0, padx=5, pady=5)



Label(frame_top, text="N·ªôi Dung:", font=("Arial", 10), bg="#F0F0F0").grid(row=2, column=1, sticky="w")
content_text = Text(frame_top, width=50, height=3)
content_text.grid(row=3, column=1, padx=5, pady=5)

# Khu v·ª±c c√†i ƒë·∫∑t
frame_settings = Frame(root, bg="#F0F0F0")
frame_settings.pack(fill="x", padx=10, pady=5)

Label(frame_settings, text="S·ªë Group / Acc", font=("Arial", 10), bg="#F0F0F0").grid(row=0, column=0, padx=5, sticky="w")
group_per_acc_entry = Entry(frame_settings, width=10)
group_per_acc_entry.insert(0, "100")
group_per_acc_entry.grid(row=0, column=1, padx=5)

Label(frame_settings, text="S·ªë Lu·ªìng", font=("Arial", 10), bg="#F0F0F0").grid(row=0, column=2, padx=5, sticky="w")
threads_entry = Entry(frame_settings, width=10)
threads_entry.insert(0, "50")
threads_entry.grid(row=0, column=3, padx=5)
# Label hi·ªÉn th·ªã s·ªë l∆∞·ª£t share
share_count_label = Label(root, text="‚úÖ Th√†nh c√¥ng: 0 / üìå T·ªïng s·ªë share: 0", font=("Arial", 10), bg="#F0F0F0")
share_count_label.pack(pady=5)
Label(frame_settings, text="Delay (gi√¢y)", font=("Arial", 10), bg="#F0F0F0").grid(row=0, column=4, padx=5, sticky="w")
delay_entry = Entry(frame_settings, width=10)
delay_entry.insert(0, "2")
delay_entry.grid(row=0, column=5, padx=5)
# **Thanh t√¨m ki·∫øm**
#frame_search = Frame(root, bg="#F0F0F0")
#frame_search.pack(fill="x", padx=10, pady=5)

#Label(frame_search, text="T√¨m ki·∫øm:", font=("Arial", 10), bg="#F0F0F0").grid(row=0, column=0, sticky="w")
#search_entry = Entry(frame_search, width=50)
#search_entry.grid(row=0, column=1, padx=5, pady=5)

#search_button = Button(frame_search, text="T√¨m", font=("Arial", 10), bg="gray", fg="white", command=search_treeview)
#search_button.grid(row=0, column=2, padx=5)

# **B·∫£ng Logs (Data Grid) v·ªõi ƒë∆∞·ªùng k·∫ª b·∫£ng**
# **Frame ch·ª©a b·∫£ng**
frame_logs = Frame(root, bg="#F0F0F0")
frame_logs.pack(fill="both", expand=True, padx=10, pady=5)

# **Thanh cu·ªôn**
scrollbar_y = Scrollbar(frame_logs, orient=VERTICAL)
scrollbar_y.pack(side=RIGHT, fill=Y)

scrollbar_x = Scrollbar(frame_logs, orient=HORIZONTAL)
scrollbar_x.pack(side=BOTTOM, fill=X)

# **T·∫°o Treeview v·ªõi ki·ªÉu b·∫£ng**
tree = ttk.Treeview(frame_logs, columns=("STT", "Cookie", "Group ID", "Response", "Status", "Check Live Post"),
                    show="headings", yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)

tree.pack(fill="both", expand=True)

# **Li√™n k·∫øt thanh cu·ªôn v·ªõi Treeview**
scrollbar_y.config(command=tree.yview)
scrollbar_x.config(command=tree.xview)

# **ƒê·ªãnh nghƒ©a c·ªôt**
tree.heading("STT", text="STT")
tree.heading("Cookie", text="Cookie")
tree.heading("Group ID", text="Group ID")
tree.heading("Response", text="Response")
tree.heading("Status", text="Status")
tree.heading("Check Live Post", text="Check Live Post")

tree.column("STT", width=50, anchor=CENTER)
tree.column("Cookie", width=150, anchor=W)
tree.column("Group ID", width=150, anchor=CENTER)
tree.column("Response", width=250, anchor=W)
tree.column("Status", width=150, anchor=W)
tree.column("Check Live Post", width=200, anchor=W)

# **Style ƒë·ªÉ t·∫°o ƒë∆∞·ªùng k·∫ª**
style = ttk.Style()
style.configure("Treeview", rowheight=25, background="#F8F8F8", borderwidth=1, relief="solid")
style.configure("Treeview.Heading", font=("Arial", 10, "bold"), background="#E0E0E0", relief="raised")
style.map("Treeview", background=[("selected", "#C0C0C0")])

# **Th√™m hi·ªáu ·ª©ng k·∫ª d√≤ng xen k·∫Ω**
tree.tag_configure("oddrow", background="#EAEAEA")  # M√†u x√°m nh·∫°t
tree.tag_configure("evenrow", background="#FFFFFF")  # M√†u tr·∫Øng

# G√°n s·ª± ki·ªán click v√†o ti√™u ƒë·ªÅ ƒë·ªÉ s·∫Øp x·∫øp
columns = ("STT", "Cookie", "Group ID", "Response", "Status")
for col in columns:
    tree.heading(col, text=col, command=lambda c=col: sort_treeview_column(c, False))

# Bi·∫øn l∆∞u √¥ ƒë√£ ch·ªçn
selected_cell = None

# G√°n s·ª± ki·ªán click chu·ªôt ƒë·ªÉ ch·ªçn √¥
tree.bind("<ButtonRelease-1>", on_treeview_click)

# G√°n Ctrl + C ƒë·ªÉ copy n·ªôi dung c·ªßa √¥
tree.bind("<Control-c>", copy_selected)
# G√°n s·ª± ki·ªán click v√†o ti√™u ƒë·ªÅ ƒë·ªÉ s·∫Øp x·∫øp
columns = ("STT", "Cookie", "Group ID", "Response", "Status")
for col in columns:
    tree.heading(col, text=col, command=lambda c=col: sort_treeview_column(c, False))
# **N√∫t ƒëi·ªÅu khi·ªÉn**
button_frame = Frame(root, bg="#F0F0F0")
button_frame.pack(pady=10)

start_button = Button(button_frame, text="B·∫Øt ƒê·∫ßu", font=("Arial", 12), bg="Green", fg="white", width=20, command=start_posting)
start_button.grid(row=0, column=0, padx=10)

stop_button = Button(button_frame, text="D·ª´ng", font=("Arial", 12), bg="Red", fg="white", width=20, command=stop_posting)
stop_button.grid(row=0, column=1, padx=10)

export_button = Button(button_frame, text="Xu·∫•t CSV", font=("Arial", 12), bg="Blue", fg="white", width=20, command=export_to_csv)
export_button.grid(row=0, column=2, padx=10)
# **Th√™m n√∫t `Ki·ªÉm Tra Live Post` v√†o button_frame**
check_live_button = Button(button_frame, text="Ki·ªÉm Tra Live Post", font=("Arial", 12), bg="Orange", fg="white", width=20, command=check_live_posts)
check_live_button.grid(row=0, column=3, padx=10)

root.mainloop()
